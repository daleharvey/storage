<pre class=metadata>
Title: Storage Standard
H1: Storage
Shortname: storage
Status: LS
Group: WHATWG
No Editor: true
!Participate: <a href=https://github.com/whatwg/storage>GitHub whatwg/storage</a> (<a href=https://github.com/whatwg/storage/issues/new>new issue</a>, <a href=https://github.com/whatwg/storage/issues>open issues</a>)
!Participate: <a href=https://wiki.whatwg.org/wiki/IRC>IRC: #whatwg on Freenode</a>
!Commits: <a href=https://github.com/whatwg/storage/commits>GitHub whatwg/storage/commits</a>
!Commits: <a href=https://twitter.com/storagestandard>@storagestandard</a>
Logo: https://resources.whatwg.org/logo-storage.svg
Abstract: The Storage Standard defines an API for persistent storage and quota estimates, as well as the platform storage architecture.
Boilerplate: omit feedback-header
</pre>

<script src=https://resources.whatwg.org/file-issue.js async></script>
<script id=head src=https://resources.whatwg.org/dfn.js defer></script>

<pre class=anchors>
urlPrefix: https://html.spec.whatwg.org/multipage/
    type: dfn
        urlPrefix: browsers.html
            text: origin
        urlPrefix: webappapis.html
            text: environment settings object
urlPrefix: https://w3c.github.io/webappsec/specs/powerfulfeatures/#
    type: dfn
        text: a secure context; url: settings-secure
</pre>



<h2 id=introduction>Introduction</h2>

Over the years the web has grown various APIs that can be used for storage, e.g., IndexedDB,
<code>localStorage</code>, and <code>showNotification()</code>. The Storage Standard consolidates
these APIs by defining:

<ul class=brief>
 <li>A box, the primitive these APIs store their data in
 <li>A way of making that box persistent
 <li>A way of getting usage and quota estimates for an <a>origin</a>
</ul>

<p>Traditionally, as the user runs out of storage space on their device, the data stored with these
APIs gets lost without the user being able to intervene. However, persistent boxes cannot be cleared
without consent by the user. This thus brings data guarantees users have enjoyed on native platforms
to the web.

<div class="example">
 <p>A simple way to make storage persistent is through invoking the {{persist()}} method. It
 simultaneously requests the end user for permission and changes the storage to be persistent once
 granted:</p>

 <pre><code class="lang-javascript">
navigator.storage.persist().then(persisted => {
  if(persisted) {
    /* &hellip; */
  }
})
</code></pre>

 <p>To not show user-agent-driven dialogs to the end user unannounced slightly more involved code
 can be written:</p>

 <pre><code class="lang-javascript">
Promise.all([
  navigator.storage.persisted(),
  navigator.permissions.query({name: "persistent-storage"})
]).then((persisted, permission) => {
  if(!persisted &amp;&amp; permission == "granted") {
    navigator.storage.persist().then( /* &hellip; */ )
  } else if(!persistent &amp;&amp; permission == "default") {
    showPersistentStorageExplanation()
  }
})
</code></pre>

 <p>The {{estimate()}} method can be used to determine whether there is enough space left to
 download another Metriod Prime level:

 <pre><code class="lang-javascript">
navigator.storage.estimate().then(info => {
  if(info.quota - info.usage > metroidPrimeLevel.size)
    return fetch(metroidPrimeLevel.url)
  throw new Error("no space")
}).then( /* &hellip; */ )
</code></pre>

</div>



<h2 id=terminology>Terminology</h2>

This specification uses terminology from the DOM and HTML Standards. [[DOM]] [[HTML]]

A <dfn>site</dfn> is eTLD+1. <span class=XXX>Needs a more formal definition.</span>



<h2 id=infrastructure>Infrastructure</h2>

A user agent has various kinds of storage:

<dl>
 <dt>Network
 <dd><p>HTTP cache, cookies, authentication entries, TLS client certificates
 <dt>Credentials
 <dd><p>End-user credentials, such as username and passwords submitted through HTML forms
 <dt>Permissions
 <dd><p>Permissions for various features, such as geolocation
 <dt>Site
 <dd>Indexed DB, Cache API, service worker registrations, <code>localStorage</code>,
 <code>history.pushState()</code>
</dl>

This specification primarily concerns itself with <dfn export id=site-storage>site storage</dfn>.

<a>Site storage</a> consists of zero or more
<dfn export id=site-storage-unit>site storage units</dfn>.

Each <a>origin</a> has an associated <a>site storage unit</a>. A <a>site storage unit</a> contains
a single <dfn export id=box>box</dfn>. [[HTML]]


<h3 id=boxes>Boxes</h3>

A <a>box</a> has <dfn export for=box>mode</dfn> which is either "<code title>best-effort</code>" or
"<code title>persistent</code>". A <dfn export>persistent box</dfn> is a <a>box</a> whose
<a>mode</a> is "<code title>persistent</code>". A <dfn export>non-persistent box</dfn> is a
<a>box</a> whose <a>mode</a> is <em>not</em> "<code title>persistent</code>".

A box is considered to be an atomic unit. Whenever a <a>box</a> is cleared by the user agent, it
must be cleared in its entirety.



<h2 id=persistence>Persistence permission</h2>

A <a>box</a> can only be turned into a <a>persistent box</a> if the user (or user agent
on behalf of the user) has granted <dfn>permission</dfn>.

<p class="XXX">We will eventually integrate with the Permissions API, with the identifier
"<code>persistent-storage</code>", but since that specification is not in great shape at the moment
that has not happened yet.



<h2 id=usage-and-quota>Usage and quota</h2>

The <dfn export>site storage usage</dfn> of an <a>origin</a> <var>origin</var> is a rough estimate
of the amount of bytes used in <var>origin</var>'s <a>site storage unit</a>.

<p class=note>This cannot be an exact amount as user agents might, and are encouraged to, use
deduplication, compression, and other techniques that obscure exactly how much bytes an
<a>origin</a> uses.

The <dfn export>site storage quota</dfn> of an <a>origin</a> <var>origin</var> is a conservative
estimate of the amount of bytes available to <var>origin</var>'s <a>site storage unit</a>. This
amount should be less than the total available storage space on the device to give users some wiggle
room.

<p class=note>User agents are strongly encouraged to provide "popular" <a>origins</a> with a larger
<a>site storage quota</a>. Factors such as navigation frequency, recency of visits, bookmarking,
and <a>permission</a> for "<code>persistent-storage</code>" can be used as indications of
"popularity".



<h2 id=ui-guidelines>User Interface Guidelines</h2>

User agents should not distinguish between network storage and <a>site storage</a> in their user
interface. Instead user agents should offer users the ability to remove all storage for a given
<a>site</a>. This ensures to some extent that network storage cannot be used to revive
<a>site storage</a>. This also reduces the amount users need to know about the different ways in
which <a>sites</a> can store data.
<!-- To some extent, since HTTP ETag... And also, permissions/credentials, maybe? -->

Credentials storage should be separated as it might contain data the user might not be able to
revive, such as an autogenerated password. Since permissions storage is mostly simple booleans it
too can be separated to avoid inconveniencing the user. Credentials and permissions are also
somewhat easier to understand and differentiate from network storage and <a>site storage</a>.


<h3 id=storage-pressure>Storage Pressure</h3>

When the user agent notices it comes under storage pressure and it cannot free up sufficient space
by clearing network storage and <a>non-persistent boxes</a> within <a>site storage</a>, then the
user agent should alert the user and offer a way to clear <a>persistent boxes</a>.



<h2 id=api>API</h2>

<pre class=idl>
[SecureContext,
 NoInterfaceObject,
 Exposed=(Window,Worker)]
interface NavigatorStorage {
  readonly attribute StorageManager storage;
};
Navigator implements NavigatorStorage;
WorkerNavigator implements NavigatorStorage;
</pre>

Each <a>environment settings object</a> has an associated {{StorageManager}} object.
[[HTML]]

The <dfn attribute for=NavigatorStorage><code>storage</code></dfn> attribute's getter must return
<a>context object</a>'s <a spec=html>relevant settings object</a>'s {{StorageManager}} object.

<pre class=idl>
[SecureContext,
 Exposed=(Window,Worker)]
interface StorageManager {
  Promise&lt;boolean> persisted();
  [Exposed=Window] Promise&lt;boolean> persist();

  Promise&lt;StorageEstimate> estimate();
};

dictionary StorageEstimate {
  unsigned long long usage;
  unsigned long long quota;
};
</pre>

The <dfn method for=StorageManager><code>persisted()</code></dfn> method, when invoked, must run
these steps:

<ol>
 <li><p>Let <var>promise</var> be a new promise.

 <li><p>Let <var>settingsObject</var> be <a spec=dom>context object</a>'s
 <a spec=html>relevant settings object</a>.

 <li>
  <p>Run these substeps <a spec=html>in parallel</a>: [[!HTML]]

  <ol>
   <li><p>Let <var>origin</var> be <var>settingsObject</var>'s <a>origin</a>.

   <li><p>Let <var>persisted</var> be true if <var>origin</var>'s <a>site storage unit</a>'s
   <a>box</a> is a <a>persistent box</a>, and false otherwise.

   <li><p>Resolve <var>promise</var> with <var>persisted</var>.
  </ol>

 <li><p>Return <var>promise</var>.
</ol>

The <dfn method for=StorageManager><code>persist()</code></dfn> method, when invoked, must run these
steps:

<ol>
 <li><p>Let <var>promise</var> be a new promise.

 <li><p>Let <var>settingsObject</var> be <a spec=dom>context object</a>'s
 <a spec=html>relevant settings object</a>.

 <li>
  <p>Run these substeps <a spec=html>in parallel</a>:

  <ol>
   <li><p>Let <var>origin</var> be <var>settingsObject</var>'s <a>origin</a>.

   <li><p>Let <var>permission</var> be <a>permission</a> for <var>origin</var>.

   <li><p>If <var>permission</var> is "<code title>prompt</code>", then ask the user whether
   turning <var>origin</var>'s <a>site storage unit</a>'s <a>box</a> into a <a>persistent box</a> is
   acceptable. If it is, then set <var>permission</var> to "<code title>granted</code>", and
   "<code title>denied</code>" otherwise.

   <li><p>Let <var>persisted</var> be true if <var>origin</var>'s <a>site storage unit</a>'s
   <a>box</a> is a <a>persistent box</a>, and false otherwise.

   <li>
    <p><a spec=html>Queue a task</a> to run these subsubsteps:
    <!-- XXX not 100% clear whether the changes below should be in a task -->

    <ol>
     <li><p>Set <a>permission</a> for <var>origin</var> to <var>permission</var>.

     <li><p>If <var>persisted</var> is false and <var>permission</var> is "<code>granted</code>",
     set <var>persisted</var> to true and set <var>origin</var>'s <a>site storage unit</a>'s
     <a>box</a>'s <a>mode</a> to "<code>persistent</code>".

     <li><p>Resolve <var>promise</var> with <var>persisted</var>.
    </ol>
  </ol>

 <li><p>Return <var>promise</var>.
</ol>

The <dfn method for=StorageManager><code>estimate()</code></dfn> method, when invoked,
must run these steps:

<ol>
 <li><p>Let <var>promise</var> be a new promise.

 <li><p>Let <var>settingsObject</var> be <a spec=dom>context object</a>'s
 <a spec=html>relevant settings object</a>.

 <li>
  <p>Run these substeps <a spec=html>in parallel</a>:

  <ol>
   <li><p>Let <var>origin</var> be <var>settingsObject</var>'s <a>origin</a>.

   <li><p>Let <var>usage</var> be <a>site storage usage</a> for <var>origin</var>.

   <li><p>Let <var>quota</var> be <a>site storage quota</a> for <var>origin</var>.

   <li><p>Let <var>dictionary</var> be a new {{StorageEstimate}} dictionary whose {{usage}} member
   is <var>usage</var> and {{quota}} member is <var>quota</var>.

   <li><p>Resolve <var>promise</var> with <var>dictionary</var>.
  </ol>

 <li><p>Return <var>promise</var>.
</ol>



<h2 class=no-num id="acks">Acknowledgments</h2>

With that, many thanks to
Adrian Bateman,
Alex Russell,
Aislinn Grigas,
Ali Alabbas,
Ben Kelly,
Ben Turner,
David Grogan,
Jake Archibald<!-- technically B.J. Archibald -->,
Jonas Sicking,
Joshua Bell,
Kenji Baheux,
Kinuko Yasuda,
Luke Wagner,
Mounir Lamouri, and
Shachar Zohar
for being awesome!

This standard is written by
<a lang=nl href=https://annevankesteren.nl/>Anne van Kesteren</a>
(<a href=https://www.mozilla.org/>Mozilla</a>,
<a href=mailto:annevk@annevk.nl>annevk@annevk.nl</a>).

Per <a rel=license href=https://creativecommons.org/publicdomain/zero/1.0/>CC0</a>, to the
extent possible under law, the editor has waived all copyright and related or neighboring
rights to this work.
